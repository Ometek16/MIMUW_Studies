<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="pl.edu.mimuw.Przyklady2Reduce" tests="4" skipped="0" failures="0" errors="0" timestamp="2023-05-31T13:01:09" hostname="MacBook-Pro-Ometek.local" time="0.378">
  <properties/>
  <testcase name="uwagaNaŁączenieNapisówWReduce()" classname="pl.edu.mimuw.Przyklady2Reduce" time="0.371"/>
  <testcase name="reduce1()" classname="pl.edu.mimuw.Przyklady2Reduce" time="0.002"/>
  <testcase name="reduce2()" classname="pl.edu.mimuw.Przyklady2Reduce" time="0.002"/>
  <testcase name="reduce3()" classname="pl.edu.mimuw.Przyklady2Reduce" time="0.003"/>
  <system-out><![CDATA[Demo!
012345678910 12
Wolne!
2288895
Czas: 321

Szybkie 1: collect StringBuilder
2288895
Czas: 30

Szybkie 1: collect Collectors.joining
2288895
Czas: 16
55
Sekwencyjnie:
(((((((((1 ⊙ 2) ⊙ 3) ⊙ 4) ⊙ 5) ⊙ 6) ⊙ 7) ⊙ 8) ⊙ 9) ⊙ 10)
Równolegle:
(((1 ⊙ 2) ⊙ (3 ⊙ (4 ⊙ 5))) ⊙ ((6 ⊙ 7) ⊙ (8 ⊙ (9 ⊙ 10))))
Uwaga! Te operacje na strumieniach stringów
są teoretycznie nieprawidłowe, bo takie 'nawiasowane'
łączenie napisów nie jest łączne! Ale kto nam zabroni ? :)
55
Sekwencyjnie:
((((((((((o ⊙ 1) ⊙ 2) ⊙ 3) ⊙ 4) ⊙ 5) ⊙ 6) ⊙ 7) ⊙ 8) ⊙ 9) ⊙ 10)
Równolegle:
((((o ⊙ 1) ⊙ (o ⊙ 2)) ⊙ ((o ⊙ 3) ⊙ ((o ⊙ 4) ⊙ (o ⊙ 5)))) ⊙ (((o ⊙ 6) ⊙ (o ⊙ 7)) ⊙ ((o ⊙ 8) ⊙ ((o ⊙ 9) ⊙ (o ⊙ 10)))))
15
Sekwencyjnie:
(((((((((((((((o · s₁) · s₂) · s₃) · s₄) · s₅) · s₆) · s₇) · s₈) · s₉) · s₁₀) · s₁₁) · s₁₂) · s₁₃) · s₁₄) · s₁₅)
Równolegle:
((((o · s₁) ⊙ ((o · s₂) ⊙ (o · s₃))) ⊙ (((o · s₄) ⊙ (o · s₅)) ⊙ ((o · s₆) ⊙ (o · s₇)))) ⊙ ((((o · s₈) ⊙ (o · s₉)) ⊙ ((o · s₁₀) ⊙ (o · s₁₁))) ⊙ (((o · s₁₂) ⊙ (o · s₁₃)) ⊙ ((o · s₁₄) ⊙ (o · s₁₅)))))
]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
